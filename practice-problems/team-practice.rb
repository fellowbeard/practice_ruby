# Write a program which will process the data listed below. 

# The data must be placed into a csv file and read from it.

# The first line of the csv file is the target price and the following lines are menu items you could buy.

# The program should then find a combination of dishes that has a total of exactly the target price. If there is no solution found, then the program should print that there is no combination of dishes that is equal to the target price. 

# The program must run with different data files generated by us in the same format, so provide instructions on how to run the program from command line with command line parameters to read alternative input files.

require 'csv'

# table = CSV.parse("1,mixed fruit,2.15\n2,french fries,2.75\n3,side salad,3.35\n4,hot wings,3.55\n5,mozzarella sticks,4.20\n6,sampler plate,5.80")

# table = CSV.parse(File.read("team-practice.csv"), headers: true)

# target_price = $15.05

# table = CSV.read("team-practice.csv")
# # food = table[0][0]
# target = 15.05
# index = 0

# while index < table.length
#   table[index][1] = table[index][1].split("$")[1].to_f
#     if target == table[index][1].uniq.combination.detect

#     end
#   index += 1
# end

# def combine_items(table)
#   table = CSV.read("team-practice.csv")
#   table[index][1] = table[index][1].split("$")[1].to_f
#   table[index][1].uniq.combination.detect{|}  
# end

# Write a function that takes in a string of code with parentheses, square brackets, and curly brackets, and checks if the code is balanced with correct bracket syntax.


# Write a function that takes in two arrays of numbers and returns all the numbers that appear in both arrays.


# Write a function that takes in an array of numbers and returns the 3rd largest number.


# Write a function that takes in two strings and returns a new string with the letters of the two strings shuffled together one after another.


# Write a function that takes in an array of strings and returns all the pairs of strings that have a total length of 8 characters.


# Write a function that takes in a string and returns the first non-repeated (unique) character in the string.


# Write a function that takes in a sorted array of words and uses binary search to find the index of the word “hello” in the array.


# Write a function that takes in two strings and returns all the locations of the second string within the first string.
# Write a function that takes in a string and returns the same string with all duplicates removed.
# Write a function that takes in an array of numbers (where one number occurs even number of times and all others have odd occurrences) and returns the number with even occurrences.